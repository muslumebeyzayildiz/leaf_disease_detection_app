/*
import 'dart:io';// File? _file için
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart'; // Firebase Storage için gerekli kütüphane
import 'package:tflite/tflite.dart'; // TensorFlow Lite için gerekli kütüphane

//TODO CAMERAAAA
class galleryPage extends StatefulWidget{
  const galleryPage({super.key});

  @override
  State<galleryPage> createState() {
    return galleryPageState();
  }
}

class galleryPageState extends State<galleryPage> {
  final picker = ImagePicker(); // Resim seçmek için kullanılacak nesne
  List<Map<String, dynamic>> _outputs = []; // Sınıflandırma sonuçlarını tutacak liste
  //bir listedir ve bu listede her bir eleman bir Map türünde veriyi temsil eder. Her bu Map, bir anahtar-değer çiftlerinden oluşur ve anahtarlar String türünde, değerler ise herhangi bir türde (dinamik) olabilir.
  bool _loading = false; // İşlemin yürütülüp yürütülmediğini belirten değişken
  File? _pickedImage; // Kameradan çekilen resmi tutacak dosya nesnesi

  @override
  void initState() {
    super.initState();
    loadModel(); // TensorFlow Lite modelini yükle
  }

  loadModel() async {
    await Tflite.loadModel(
      model: 'assets/vww_96_grayscale_quantized.tflite', // Model dosyasının yolu
      labels: 'assets/labels.txt', // Etiket dosyasının yolu
    );
  }

  classifyImage() async {
    setState(() {
      _loading = true; // İşlem başladığında _loading değerini true olarak ayarla
    });

    final pickedImage = await picker.pickImage(source: ImageSource.camera); // Kameradan resim seç

    if (pickedImage == null) {
      setState(() {
        _loading = false; // Eğer resim seçilmediyse _loading değerini false olarak ayarla
      });
      return;
    }

    setState(() {
      _pickedImage = File(pickedImage.path); // Kameradan çekilen resmi sakla
    });

    Reference reference = FirebaseStorage.instance.ref().child('images/${DateTime.now().millisecondsSinceEpoch}.jpg');
    await reference.putFile(_pickedImage!); // Firebase Storage'a resmi yükle
    String imageUrl = await reference.getDownloadURL(); // Yüklenen resmin indirme URL'sini al

    var output = await Tflite.runModelOnImage(
      path: _pickedImage!.path, // Sınıflandırma için kullanılacak resmin yolu
      numResults: 5,
      threshold: 0.1,
      imageMean: 127.5,
      imageStd: 127.5,
    );

    setState(() {
      _loading = false; // İşlem tamamlandığında _loading değerini false olarak ayarla
      _outputs = output!.cast<Map<String, dynamic>>(); // Dönüşümü gerçekleştir// Sınıflandırma sonuçlarını _outputs listesine aktar
    });

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Sınıflandırma Sonucu"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.network(imageUrl), // Firebase Storage'dan yüklenen resmi göster
              SizedBox(height: 10),
              Text("Sınıf: ${_outputs[0]["label"]}"), // Tahmin edilen sınıf adını yazdır
              Text("Doğruluk: ${(100 * _outputs[0]["confidence"]).toStringAsFixed(2)}%"), // Güven oranını yazdır
            ],
          ),
          actions: [
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop(); // İleti penceresini kapat
              },
              child: Text("Tamam"),
            ),
          ],
        );
      },
    );
  }

  @override
  void dispose() {//dispose metodu, State sınıfı ömrü sona erdiğinde (örneğin, ilgili sayfa kapatıldığında) otomatik olarak çağrılır. Bu nedenle, TensorFlow Lite modelini kullanım sonrası kapatmak ve potansiyel bellek sızıntılarını önlemek için dispose metodu içinde Tflite.close(); çağrısı yapılır.
    Tflite.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _loading
                ? CircularProgressIndicator() // İşlem yürütülüyorsa yükleniyor göstergesi göster
                : ElevatedButton(
              onPressed: classifyImage,
              child: Text('Resim Çek ve Sınıflandır'),
            ), // Sınıflandırma işlemi düğmesi
            SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}

*/